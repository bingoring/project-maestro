# Project Maestro Enterprise Configuration Example
# Copy this file to .env and configure with your actual values

# =====================================================
# Core Application Settings
# =====================================================

ENVIRONMENT=development
DEBUG=true
LOG_LEVEL=INFO

# API Configuration
API_HOST=0.0.0.0
API_PORT=8000
API_WORKERS=1

# Security
SECRET_KEY=your-super-secret-key-change-in-production
ACCESS_TOKEN_EXPIRE_MINUTES=30

# =====================================================
# AI Services (Required)
# =====================================================

# OpenAI (Required for most features)
OPENAI_API_KEY=sk-your-openai-api-key-here

# Anthropic (Optional, for alternative models)
ANTHROPIC_API_KEY=your-anthropic-api-key-here

# LangChain Tracing (Optional, for debugging)
LANGCHAIN_TRACING_V2=false
LANGCHAIN_API_KEY=your-langsmith-api-key-here
LANGCHAIN_PROJECT=project-maestro-enterprise

# =====================================================
# Enterprise Systems Integration
# =====================================================

# Jira Integration
JIRA_ENABLED=true
JIRA_BASE_URL=https://yourcompany.atlassian.net
JIRA_USERNAME=your-email@company.com
JIRA_API_TOKEN=your-jira-api-token-here
JIRA_PROJECT_KEYS=["PROJ", "DEV", "SUPPORT", "BUG"]

# Slack Integration
SLACK_ENABLED=true
SLACK_BOT_TOKEN=xoxb-your-slack-bot-token-here
SLACK_APP_TOKEN=xapp-your-slack-app-token-here
SLACK_CHANNELS=["general", "development", "support", "product"]
SLACK_MAX_HISTORY_DAYS=30

# Confluence Integration  
CONFLUENCE_ENABLED=true
CONFLUENCE_BASE_URL=https://yourcompany.atlassian.net/wiki
CONFLUENCE_USERNAME=your-email@company.com
CONFLUENCE_API_TOKEN=your-confluence-api-token-here
CONFLUENCE_SPACE_KEYS=["DEV", "PROJ", "KB", "DOCS"]

# =====================================================
# RAG System Configuration
# =====================================================

# RAG Core Settings
RAG_ENABLED=true
RAG_EMBEDDING_MODEL=text-embedding-ada-002
RAG_CHUNK_SIZE=1000
RAG_CHUNK_OVERLAP=200
RAG_MAX_RESULTS=10
RAG_SIMILARITY_THRESHOLD=0.7

# Vector Database Configuration
# Options: chroma, pinecone, weaviate
RAG_VECTOR_STORE_TYPE=chroma

# Chroma Configuration (if using chroma)
CHROMA_HOST=localhost
CHROMA_PORT=8000
CHROMA_COLLECTION_NAME=maestro_enterprise

# Pinecone Configuration (if using pinecone)
# PINECONE_API_KEY=your-pinecone-api-key-here
# PINECONE_ENVIRONMENT=us-west1-gcp
# PINECONE_INDEX_NAME=maestro-enterprise

# =====================================================
# Query Agent Configuration
# =====================================================

# Query Agent Core
QUERY_AGENT_ENABLED=true
QUERY_AGENT_MODEL=gpt-4-turbo-preview
QUERY_AGENT_TEMPERATURE=0.1
QUERY_AGENT_MAX_TOKENS=1000

# Cascading System
QUERY_CASCADING_ENABLED=true
QUERY_COMPLEXITY_THRESHOLD=0.6

# Intent Analysis
INTENT_ANALYSIS_ENABLED=true
INTENT_ANALYSIS_MODEL=gpt-3.5-turbo
INTENT_CONFIDENCE_THRESHOLD=0.8
INTENT_FALLBACK_TO_GENERAL=true

# =====================================================
# Enterprise Data Synchronization
# =====================================================

# Sync Settings
ENTERPRISE_SYNC_ENABLED=true
ENTERPRISE_SYNC_INTERVAL_HOURS=24
ENTERPRISE_SYNC_BATCH_SIZE=100
ENTERPRISE_DATA_RETENTION_DAYS=90

# =====================================================
# Database Configuration
# =====================================================

# PostgreSQL
DATABASE_URL=postgresql+asyncpg://maestro:password@localhost:5432/project_maestro
DATABASE_POOL_SIZE=10
DATABASE_MAX_OVERFLOW=20

# Redis (for caching and task queues)
REDIS_URL=redis://localhost:6379/0
REDIS_MAX_CONNECTIONS=10

# Celery (for background tasks)
CELERY_BROKER_URL=redis://localhost:6379/1
CELERY_RESULT_BACKEND=redis://localhost:6379/2

# =====================================================
# File Storage Configuration
# =====================================================

# Storage Type: local, minio, s3
STORAGE_TYPE=local

# MinIO Configuration (if using minio)
# MINIO_ENDPOINT=localhost:9000
# MINIO_ACCESS_KEY=minioadmin
# MINIO_SECRET_KEY=minioadmin
# MINIO_SECURE=false
# MINIO_BUCKET_NAME=maestro-enterprise

# AWS S3 Configuration (if using s3)
# AWS_ACCESS_KEY_ID=your-aws-access-key
# AWS_SECRET_ACCESS_KEY=your-aws-secret-key
# AWS_REGION=us-west-2
# S3_BUCKET_NAME=maestro-enterprise

# =====================================================
# Game Development Configuration (Original Features)
# =====================================================

# Unity Configuration
UNITY_PATH=/Applications/Unity/Hub/Editor/2023.2.0f1/Unity.app/Contents/MacOS/Unity
UNITY_PROJECT_PATH=/tmp/unity_projects
UNITY_BUILD_PATH=/tmp/maestro_builds

# External AI Services for Game Development
# SUNO_API_KEY=your-suno-api-key-here
# UDIO_API_KEY=your-udio-api-key-here
# REPLICATE_API_TOKEN=your-replicate-token-here
# STABLE_DIFFUSION_API_KEY=your-sd-api-key-here

# =====================================================
# Agent Configuration
# =====================================================

# Multi-Agent Settings
MAX_CONCURRENT_AGENTS=10
AGENT_RETRY_ATTEMPTS=3
AGENT_RETRY_DELAY=1.0

# Task Timeouts (in seconds)
TASK_TIMEOUT_DEFAULT=300
TASK_TIMEOUT_CODE_GENERATION=600
TASK_TIMEOUT_ART_GENERATION=1200
TASK_TIMEOUT_SOUND_GENERATION=900
TASK_TIMEOUT_LEVEL_GENERATION=400
TASK_TIMEOUT_BUILD=1800

# =====================================================
# Performance and Monitoring
# =====================================================

# Rate Limiting
RATE_LIMIT_PER_MINUTE=60
RATE_LIMIT_BURST=10

# Monitoring Ports
PROMETHEUS_PORT=9090
GRAFANA_PORT=3000

# Data Directories
# PROJECT_ROOT will be auto-detected
# DATA_DIR=/tmp/maestro_data
# LOGS_DIR=/tmp/maestro_logs

# =====================================================
# Setup Instructions
# =====================================================

# 1. Copy this file to .env in your project root
# 2. Update all placeholder values with your actual credentials
# 3. Install required dependencies:
#    pip install atlassian-python-api slack-sdk chromadb
# 4. Initialize the database:
#    python -m src.project_maestro.scripts.init_db
# 5. Initialize enterprise data:
#    python -m src.project_maestro.scripts.init_enterprise_data
# 6. Start the application:
#    python -m src.project_maestro.main

# =====================================================
# Security Notes
# =====================================================

# - Never commit this file to version control with real credentials
# - Use strong, unique API tokens for all services
# - Rotate credentials regularly
# - Consider using a secrets management system in production
# - Enable audit logging for compliance requirements

# =====================================================
# Getting API Tokens
# =====================================================

# Jira API Token:
# 1. Go to https://id.atlassian.com/manage-profile/security/api-tokens
# 2. Click "Create API token"
# 3. Give it a label and copy the token

# Confluence API Token:
# Same as Jira (uses Atlassian account)

# Slack Bot Token:
# 1. Go to https://api.slack.com/apps
# 2. Create a new app or select existing
# 3. Go to "OAuth & Permissions"
# 4. Add these bot scopes: channels:history, channels:read, users:read
# 5. Install app to workspace and copy Bot User OAuth Token

# OpenAI API Key:
# 1. Go to https://platform.openai.com/api-keys
# 2. Click "Create new secret key"
# 3. Copy the key immediately (it won't be shown again)